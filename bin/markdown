#!/usr/bin/env node

"use strict";

var fs = require('fs'),
    path = require('path'),
    p = require('../lib'),
    argp = require('argp'),
    argv = argp.createParser({ once: true })
        .allowUndefinedArguments()
        .readPackage(path.join(__dirname, '..', 'package.json'))
        .usages(["markdown [options] <input_file>"])
        .on ("argument", function (argv, argument, ignore){
            if (argv.file) this.fail ("Too many arguments.");
            argv.file = argument;
            ignore ();
        })
        .on ("end", function (argv){
            if (!argv.file) this.fail ("An input file is required");
        })
        .body()
        .text(" Options:")
        .option({short: "o", long: "output", metavar: "STR", optional: true, description: "output filename"})
        .option({short: "t", long: "theme", choices: p.theme, default: p.defaultTheme,
                 metavar: "STR", optional: true,
                 description: "The thems, default: " + p.defaultTheme + 
                 ".\nAvaliables themes: \n" + p.themes.join(', ')})
        .option({short: "c", long: "code-theme", choices: p.codeThemes, default: p.codeDefaultTheme,
                 metavar: "STR", optional: true,
                 description: "The code themes, default: " + p.codeDefaultTheme + 
                 ".\nAvaliables code themes: \n" + p.codeThemes.join(', ')})
        .help()
        .argv();

var input = fs.readFileSync(argv.file, {encoding: "utf8"});

var out = p.marked(input);

var html = p.html;

var themeHolder = '<!--theme-->';
var codethemeHolder = '<!--code-theme-->';
var markdownHolder = '<!--markdown-->';

var theme = argv['theme'];
var codeTheme = argv['code-theme'];

html = html
    .replace(themeHolder, fs.readFileSync(p.themeCss[theme], 'utf8'))
    .replace(codethemeHolder, fs.readFileSync(p.codeThemeCss[codeTheme], 'utf8'))
    .replace(markdownHolder, out);

var outputFile = argv.output || argv.file + '.html';

fs.writeFileSync(outputFile, html);


